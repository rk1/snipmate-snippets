snippet $
	$("${1}")${2}
snippet add
	.add("${2:selector expression}")${3}
snippet addc
	.addClass("${1:class name}")${2}
snippet after
	.after("${2:Some text <b>and bold!</b>}")${3}
snippet ajax
	$.ajax({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:Element or Expression}") ),
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajaxcomplete
	.ajaxComplete(function (${1:e}, xhr, settings) {
		${2:// callback}
	});
snippet ajaxerror
	.ajaxError(function (${1:e}, xhr, settings, thrownError) {
		${2:// error callback}
	});
	${3}
snippet ajaxget
	$.get("${1:mydomain.com/url}",
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajaxpost
	$.post("${1:mydomain.com/url}",
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet ajaxprefilter
	$.ajaxPrefilter(function (${1:options}, ${2:originalOptions}, jqXHR) {
		${3: // Modify options, control originalOptions, store jqXHR, etc}
	});
snippet ajaxsend
	.ajaxSend(function (${1:request, settings}) {
		${2:// error callback}
	});
	${3}
snippet ajaxsetup
	$.ajaxSetup({
		url: "${1:mydomain.com/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:Element or Expression}") ),
		complete: function (jqXHR, textStatus) {
			${5:// callback}
		},
		success: function (data, textStatus, jqXHR) {
			${6:// success callback}
		},
		error: function (jqXHR, textStatus, errorThrown) {
			${7:// error callback}
		}
	});
snippet ajaxstart
	$.ajaxStart(function () {
		${1:// handler for when an AJAX call is started and no other AJAX calls are in progress};
	});
	${2}
snippet ajaxstop
	$.ajaxStop(function () {
		${1:// handler for when all AJAX calls have been completed};
	});
	${2}
snippet ajaxsuccess
	$.ajaxSuccess(function (${1:e}, xhr, settings) {
		${2:// handler for when any AJAX call is successfully completed};
	});
	${2}
snippet andself
	.andSelf()${2}
snippet animate
	.animate({${2:param1: value1, param2: value2}}, ${3:speed})${4}
snippet append
	.append("${2:Some text <b>and bold!</b>}")${3}
snippet appendTo
	.appendTo("${2:selector expression}")${3}
snippet attr
	.attr("${1:attribute}", "${2:value}")${3}
snippet attrm
	.attr({"${2:attr1}": "${3:value1}", "${4:attr2}": "${5:value2}"})${6}
snippet before
	.before("${2:Some text <b>and bold!</b>}")${3}
snippet bind
	.bind("${2:event name}", function (${3:e}) {
		${4:// event handler}
	});
snippet blur
	.blur(function (${2:e}) {
		${3:// event handler}
	});
snippet C
	$.Callbacks()${1}
snippet Cadd
	${1:callbacks}.add(${2:callbacks})${3}
snippet Cdis
	${1:callbacks}.disable()${2}
snippet Cempty
	${1:callbacks}.empty()${2}
snippet Cfire
	${1:callbacks}.fire(${2:args})${3}
snippet Cfired
	${1:callbacks}.fired()${2}
snippet Cfirew
	${1:callbacks}.fireWith(${2:this}, ${3:args})${4}
snippet Chas
	${1:callbacks}.has(${2:callback})${3}
snippet Clock
	${1:callbacks}.lock()${2}
snippet Clocked
	${1:callbacks}.locked()${2}
snippet Crem
	${1:callbacks}.remove(${2:callbacks})${3}
snippet change
	.change(function (${2:e}) {
		${3:// event handler}
	});
snippet children
	.children("${2:selector expression}")${3}
snippet clearq
	.clearQueue(${2:"queue name"})${3}
snippet click
	.click(function (${1:e}) {
		${2:// event handler}
	});
snippet clone
	.clone()${2}
snippet contains
	$.contains(${1:container}, ${2:contents});
snippet css
	.css("${1:attribute}", "${2:value}")${3}
snippet csshooks
	$.cssHooks["${1:CSS prop}"] = {
		get: function (elem, computed, extra) {
			${2: // handle getting the CSS property}
		},
		set: function (elem, value) {
			${3: // handle setting the CSS value}
		}
	};
snippet cssm
	.css({${2:attribute1}: "${3:value1}", ${4:attribute2}: "${5:value2}"})${6}
snippet D
	$.Deferred()${1}
snippet Dalways
	${1:deferred}.always(${2:callbacks})${3}
snippet Ddone
	${1:deferred}.done(${2:callbacks})${3}
snippet Dfail
	${1:deferred}.fail(${2:callbacks})${3}
snippet Disrej
	${1:deferred}.isRejected()${2}
snippet Disres
	${1:deferred}.isResolved()${2}
snippet Dnotify
	${1:deferred}.notify(${2:args})${3}
snippet Dnotifyw
	${1:deferred}.notifyWith(${2:this}, ${3:args})${4}
snippet Dpipe
	${1:deferred}.then(${2:doneFilter}, ${3:failFilter}, ${4:progressFilter})${5}
snippet Dprog
	${1:deferred}.progress(${2:callbacks})${3}
snippet Dprom
	${1:deferred}.promise(${2:target})${3}
snippet Drej
	${1:deferred}.reject(${2:args})${3}
snippet Drejw
	${1:deferred}.rejectWith(${2:this}, ${3:args})${4}
snippet Dres
	${1:deferred}.resolve(${2:args})${3}
snippet Dresw
	${1:deferred}.resolveWith(${2:this}, ${3:args})${4}
snippet Dstate
	${1:deferred}.state()${2}
snippet Dthen
	${1:deferred}.then(${2:doneCallbacks}, ${3:failCallbacks}, ${4:progressCallbacks})${5}
snippet Dwhen
	$.when(${1:deferreds})${2}
snippet data
	.data(${2:obj})${3}
snippet dataa
	$.data("${1:selector expression}", "${2:key}"${3:, "value"})${4}
snippet dblclick
	.dblclick(function (${2:e}) {
		${3:// event handler}
	});
snippet delay
	.delay(${1})${2}
snippet dele
	.delegate("${2:selector expression}", "${3:event name}", function (${4:e}) {
		${5:// event handler}
	});
snippet deq
	.dequeue(${2:"queue name"})${3}
snippet deqq
	$.dequeue("${1:selector expression}"${2:, "queue name"})${3}
snippet detach
	.detach("${2:selector expression}")${3}
snippet die
	.die(${2:event}, ${3:handler})${4}
snippet each
	.each(function (index) {
		${2:this.innerHTML = this + " is the element, " + index + " is the position";}
	});
snippet el
	$("<${1}/>"${2:, {}})${3}
snippet eltrim
	$.trim("${1:string}")${2}
snippet empty
	.empty()${2}
snippet end
	.end()${2}
snippet eq
	.eq(${2:element index})${3}
snippet error
	.error(function (${2:e}) {
		${3:// event handler}
	});
snippet eventsmap
	{
		:f${1}
	}
snippet extend
	$.extend(${1:true, }${2:target}, ${3:obj})${4}
snippet fadein
	.fadeIn(${1})${2}
snippet fadeinc
	.fadeIn(${1}, function () {
		${2}
	});
snippet fadeout
	.fadeOut(${1})${2}
snippet fadeoutc
	.fadeOut(${1}, function () {
		${2}
	});
snippet fadeto
	.fadeTo("${2:slow/400/fast}", ${3:0.5})${4}
snippet fadetoc
	.fadeTo("slow/400/fast", ${2:0.5}, function () {
		${3:// callback};
	});
snippet filter
	.filter("${2:selector expression}")${3}
snippet filtert
	.filter(function (${2:index}) {
		${3:// test code}
	})${4}
snippet find
	.find("${2:selector expression}")${3}
snippet focus
	.focus(function (${2:e}) {
		${3:// event handler}
	});
snippet focusin
	.focusIn(function (${2:e}) {
		${3:// event handler}
	});
snippet focusout
	.focusOut(function (${2:e}) {
		${3:// event handler}
	});
snippet get
	.get(${2:element index})${3}
snippet getjson
	$.getJSON("${1:mydomain.com/url}",
		${2:{ param1: value1 },}
		function (data, textStatus, jqXHR) {
			${3:// success callback}
		}
	);
snippet getscript
	$.getScript("${1:mydomain.com/url}", function (script, textStatus, jqXHR) {
		${2:// callback}
	});
snippet grep
	$.grep(${1:array}, function (item, index) {
		${2:// test code}
	}${3:, true});
snippet hasc
	.hasClass("${2:className}")${3}
snippet hasd
	$.hasData("${1:selector expression}");
snippet height
	.height(${2:integer})${3}
snippet hide
	.hide("${2:slow/400/fast}")${3}
snippet hidec
	.hide("${2:slow/400/fast}", function () {
		${3:// callback}
	});
snippet hover
	.hover(function (${2:e}) {
		${3:// event handler}
	}, function ($2) {
		${4:// event handler}
	});${5}
snippet html
	.html("${2:Some text <b>and bold!</b>}")${3}
snippet inarr
	$.inArray(${1:value}, ${2:array});
snippet insa
	.insertAfter("${2:selector expression}")${3}
snippet insb
	.insertBefore("${2:selector expression}")${3}
snippet is
	.is("${2:selector expression}")${3}
snippet isarr
	$.isArray()${2}
snippet isempty
	$.isEmptyObject()${2}
snippet isfunc
	$.isFunction()${2}
snippet isnum
	$.isNumeric(${1:value})${2}
snippet isobj
	$.isPlainObject()${2}
snippet iswin
	$.isWindow()${2}
snippet isxml
	$.isXMLDoc(${1:node})${2}
snippet kdown
	.keydown(function (${2:e}) {
		${3:// event handler}
	});
snippet kpress
	.keypress(function (${2:e}) {
		${3:// event handler}
	});
snippet kup
	.keyup(function (${2:e}) {
		${3:// event handler}
	});
snippet last
	.last("${1:selector expression}")${3}
snippet live
	.live("${2:events}", function (${3:e}) {
		${4:// event handler}
	});
snippet load
	.load(function (${2:e}) {
		${3:// event handler}
	});
snippet loadf
	.load("${2:mydomain.com/url}",
		${2:{ param1: value1 },}
		function (responseText, textStatus, xhr) {
			${3:// success callback}
		}
	});
snippet makearray
	$.makeArray();
snippet map
	.map(function (${2:index}, ${3:element}) {
		${4:// callback}
	});
snippet mapp
	$.map(${1:arrayOrObject}, function (${2:value}, ${3:indexOrKey}) {
		${4:// callback}
	});
snippet merge
	$.merge(${1:target}, ${2:original});
snippet mdown
	.mousedown(function (${2:e}) {
		${3:// event handler}
	});
snippet menter
	.mouseenter(function (${2:e}) {
		${3:// event handler}
	});
snippet mleave
	.mouseleave(function (${2:e}) {
		${3:// event handler}
	});
snippet mmove
	.mousemove(function (${2:e}) {
		${3:// event handler}
	});
snippet mout
	.mouseout(function (${2:e}) {
		${3:// event handler}
	});
snippet mover
	.mouseover(function (${2:e}) {
		${3:// event handler}
	});
snippet mup
	.mouseup(function (${2:e}) {
		${3:// event handler}
	});
snippet next
	.next("${2:selector expression}")${3}
snippet nexta
	.nextAll("${2:selector expression}")${3}
snippet nextu
	.nextUntil("${2:selector expression}"${3:, "filter expression"})${4}
snippet not
	.not("${2:selector expression}")${3}
snippet off
	.off("${2:events}", "${3:selector expression}"${4:, handler})${5}
snippet offset
	.offset()${2}
snippet offsetp
	.offsetParent()${2}
snippet on
	.on("${2:events}", "${3:selector expression}", function (${4:e}) {
		${5:// event handler}
	});
snippet one
	.one("${2:event name}", function (${3:e}) {
		${4:// event handler}
	});
snippet outerh
	.outerHeight()${2}
snippet outerw
	.outerWidth()${2}
snippet param
	$.param()${2}
snippet parent
	.parent("${2:selector expression}")${3}
snippet parents
	.parents("${2:selector expression}")${3}
snippet parentsu
	.parentsUntil("${2:selector expression}"${3:, "filter expression"})${4}
snippet parsejson
	$.parseJSON(${1:data})${2}
snippet parsexml
	$.parseXML(${1:data})${2}
snippet pos
	.position()${2}
snippet prepend
	.prepend("${2:Some text <b>and bold!</b>}")${3}
snippet prependto
	.prependTo("${2:selector expression}")${3}
snippet prev
	.prev("${2:selector expression}")${3}
snippet preva
	.prevAll("${2:selector expression}")${3}
snippet prevu
	.prevUntil("${2:selector expression}"${3:, "filter expression"})${4}
snippet promise
	.promise(${2:"fx"}, ${3:target})${4}
snippet prop
	.prop("${2:property name}")${3}
snippet proxy
	$.proxy(${1:function}, ${2:this})${3}
snippet pushstack
	.pushStack(${2:elements})${3}
snippet queue
	.queue(${2:name}${3:, newQueue})${4}
snippet queuee
	$.queue(${1:element}${2:, name}${3:, newQueue})${4}
snippet ready
	$(function () {
		${1}
	});
snippet rem
	.remove()${2}
snippet rema
	.removeAttr("${2:attribute name}")${3}
snippet remc
	.removeClass("${2:class name}")${3}
snippet remd
	.removeData("${2:key name}")${3}
snippet remdd
	$.removeData(${1:element}${2:, "key name}")${3}
snippet remp
	.removeProp("${2:property name}")${3}
snippet repa
	.replaceAll(${2:target})${3}
snippet repw
	.replaceWith(${2:content})${3}
snippet reset
	.reset(function (${2:e}) {
		${3:// event handler}
	});
snippet resize
	.resize(function (${2:e}) {
		${3:// event handler}
	});
snippet scroll
	.scroll(function (${2:e}) {
		${3:// event handler}
	});
snippet scrolll
	.scrollLeft(${2:value})${3}
snippet scrollt
	.scrollTop(${2:value})${3}
snippet sdown
	.slideDown("${2:slow/400/fast}")${3}
snippet sdownc
	.slideDown("${2:slow/400/fast}", function () {
		${3:// callback};
	});
snippet select
	.select(function (${2:e}) {
		${3:// event handler}
	});
snippet serialize
	.serialize()${2}
snippet serializea
	.serializeArray()${2}
snippet show
	.show("${2:slow/400/fast}")${3}
snippet showc
	.show("${2:slow/400/fast}", function () {
		${3:// callback}
	});
snippet sib
	.siblings("${2:selector expression}")${3}
snippet size
	.size()${2}
snippet slice
	.slice(${2:start}${3:, end})${4}
snippet stoggle
	.slideToggle("${2:slow/400/fast}")${3}
snippet stop
	.stop("${2:queue}", ${3:false}, ${4:false})${5}
snippet submit
	.submit(function (${2:e}) {
		${3:// event handler}
	});
snippet sup
	.slideUp("${2:slow/400/fast}")${3}
snippet supc
	.slideUp("${2:slow/400/fast}", function () {
		${3:// callback};
	});
snippet text
	.text(${2:"some text"})${3}
snippet this
	$(this)${1}
snippet toarr
	.toArray()
snippet tog
	.toggle(function (${2:e}) {
		${3:// event handler}
	}, function ($2) {
		${4:// event handler}
	});
	${4}
snippet togclass
	.toggleClass("${2:class name}")${3}
snippet togsh
	.toggle("${2:slow/400/fast}")${3}
snippet trig
	.trigger("${2:event name}")${3}
snippet trigh
	.triggerHandler("${2:event name}")${3}
snippet $trim
	$.trim(${1:str})${2}
snippet $type
	$.type()${2}
snippet unbind
	.unbind("${2:event name}")${3}
snippet undele
	.undelegate(${2:selector expression}, ${3:event}, ${4:handler})${5}
snippet uniq
	$.unique(${1:array})${2}
snippet unload
	.unload(function (${2:e}) {
		${3:// event handler}
	});
snippet unwrap
	.unwrap()${2}
snippet val
	.val("${2:text}")${3}
snippet width
	.width(${2:integer})${3}
snippet wrap
	.wrap("${2:&lt;div class="extra-wrapper"&gt;&lt;/div&gt;}")${3}
snippet cssdb
	.css("border", "1px solid red")${9}
